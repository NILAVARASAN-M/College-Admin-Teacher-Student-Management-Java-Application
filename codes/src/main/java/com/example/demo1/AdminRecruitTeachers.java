package com.example.demo1;

import javafx.animation.PauseTransition;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class AdminRecruitTeachers extends AdminStotage
{
    static String nameRecruit="",idRecruit="",passwordRecruit="";
    public static ArrayList<String> list=new ArrayList<>();
    Text verificationMessage = new Text();


    @Override
    public void start(Stage primaryStage) throws IOException {
        primaryStage.getIcons().add(image);
        ClassNameForPPT= this.getClass().getName();
        BorderPane root = new BorderPane();


        root.setTop(super.createHeader("Recruit Teachers"));
        root.setBottom(super.createFooter());
        root.setCenter(createMiddlePartSplit());

        Scene scene = new Scene(root, 800, 600);

        primaryStage.setScene(scene);

        primaryStage.setTitle(faviconTitle);

        primaryStage.show();
    }

    @Override
    public SplitPane createMiddlePartSplit() throws IOException {
        SplitPane middle = new SplitPane();
        middle.setDividerPositions(0.5);

        // Create the left part with a photo
        photo1Logo.setFitWidth(400);
        photo1Logo.setFitHeight(400);
        StackPane left = new StackPane(photo1Logo);

        // Create the right part with credentials for sign-up

        Text RecruitTeachers=new Text("New Recruit");
        RecruitTeachers.setFont(Font.font("Arial", FontWeight.BOLD, 24));

        TextField name=new TextField();
        name.setPromptText("*enter name of new recruit");
        name.setMaxWidth(260);
        name.textProperty().addListener((observable, oldValue, newValue) -> {
            nameRecruit = newValue.trim();
        });

        TextField collegeId=new TextField();
        collegeId.setPromptText("*assign college-ID");
        collegeId.setMaxWidth(260);
        collegeId.textProperty().addListener((observable, oldValue, newValue) -> {
            idRecruit = newValue.trim();
        });
        Button randomButton=new Button("Random Number");
        randomButton.setStyle("-fx-background-color: black; -fx-text-fill: white; ");
        randomButton.setOnAction(e->{
            //this is the random number generated by this button
            collegeId.setText(IDrandomGenerator());
        });

        TextField password=new TextField();
        password.setPromptText("*assign password");
        password.setMaxWidth(260);
        password.textProperty().addListener((observable, oldValue, newValue) -> {
            passwordRecruit = newValue.trim();
        });
        Button randomPasswordButton=new Button("Random Password");
        randomPasswordButton.setStyle("-fx-background-color: #444444; -fx-text-fill: white;");
        randomPasswordButton.setOnAction(e->{
            password.setText(RandomPasswordGenerator());
        });

        Button fill=new Button("Fill");
        fill.setStyle("-fx-background-color: #228B22; -fx-text-fill: white; -fx-font-weight: bold;");
        fill.setMaxWidth(50);
        Text message=new Text("");
        message.setFont(Font.font("Arial", FontWeight.BOLD, 14));

        fill.setOnAction(event->{
            if(nameRecruit==null || passwordRecruit==null || idRecruit==null || nameRecruit.isEmpty() || passwordRecruit.isEmpty() || idRecruit.isEmpty()){
                message.setText("please enter all fields");
                message.setFill(Color.RED);
            }
            else {
                if (!UniqueCollegeIdChecker(idRecruit)) {
                    try{
                        newRecruitDataToTxtFile(nameRecruit,idRecruit,passwordRecruit);
                        message.setText("Successfully Created Account\n for ID:  "+idRecruit);
                        message.setFill(Color.GREEN);
                        PauseTransition pause = new PauseTransition(Duration.seconds(2));
                        pause.setOnFinished(e -> {
                            name.setText("");
                            password.setText("");
                            collegeId.setText("");
                            message.setText("");
                        });
                        pause.play();
                    }
                    catch (IOException e){e.printStackTrace();}
                }
                else {
                    message.setText("Account With \nID: "+idRecruit+"\nalready found!!!!");
                    message.setFill(Color.RED);
                }
            }
        });

        HBox idBox1=new HBox(5,collegeId,randomButton);
        idBox1.setAlignment(Pos.CENTER);
        HBox idBox2=new HBox(5,password,randomPasswordButton);
        idBox2.setAlignment(Pos.CENTER);
        VBox tem1=new VBox(10,name,idBox1,idBox2,fill,message);

        tem1.setAlignment(Pos.CENTER);
        tem1.setPadding(new Insets(10));
        tem1.setStyle("-fx-background-color: #F5F5F5;");

        VBox right = new VBox(30,RecruitTeachers,tem1);
        right.setAlignment(Pos.CENTER);
        right.setPadding(new Insets(10));
        right.setStyle("-fx-background-color: #F5F5F5;");

        // Add the left and right parts to the SplitPane
        middle.getItems().addAll(left, right);
        return middle;
    }
    public static void main(String[] args) throws IOException{
        launch(args);
    }

    public static String RandomNumberGenrator(){
        Random random=new Random();
        return Integer.toString(random.nextInt(900000)+100000);
    }
    //if there is a possible error then it will be due to this only
    public static String IDrandomGenerator() {
        boolean a = true;
        String temp="";
        while (a) {
            temp = RandomNumberGenrator();
            a=UniqueCollegeIdChecker(temp);
        }
        return temp;
    }
    public static String RandomPasswordGenerator(){
        String AllPossibleCharacters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder temp=new StringBuilder();
        int passwordLength=8;
        for(int i=0;i<passwordLength;i++){
            Random random=new Random();
            temp=temp.append(AllPossibleCharacters.charAt(random.nextInt(AllPossibleCharacters.length())));
        }
        return temp.toString();
    }
    public static void newRecruitDataToTxtFile(String name,String collegeId,String password) throws IOException{
        FileWriter fileWriter=new FileWriter("user_data.txt",true);
        fileWriter.write(name.concat(",").concat(collegeId).concat(",").concat(password).concat("\n"));
        fileWriter.close();
    }

    @Override
    public StackPane createMiddleSectionStack() throws IOException {
        return null;
    }
    public static boolean UniqueCollegeIdChecker(String collegeID){
        File file=new File("user_data.txt");
        Scanner scanner= null;
        try {
            scanner = new Scanner(file);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        while (scanner.hasNextLine()){
            String tem=scanner.nextLine();
            String[] splitStr=tem.split(",");
            if(splitStr[1].equals(collegeID)){
                return true;
            }
        }
        return false;
    }

}


/*
the admin can enter the teacher name whi he recruited,
paswordd and college-id can be genarted randomly, and fill button is clicked that data is saved.
and remains only for 2-sec, and then page get refreshed
also this collegeid is the key thing and is unique for each teachers,
so that will be unique and we also made like that using a function

*******
basically this code in detail has no erros works for any case, like to say
suppose, we know ythat there vcan be many teachers with same name, and also the password, van be same.
so no problen with that, now the problem is with the collegeID,
suppose if a admin manually assigns same, collegeID for one more teacher again, in that case it will create
many compilcation. to avoiud that we are using this function UniqueCollegeIdChecker.
to check if any other person has same collegeID, if he have the. hit will tro error.
and so on

timer is 2 sec, after it will ersae automatically and so on.......
 */


/*
************************************************************************************ END************************************
 */